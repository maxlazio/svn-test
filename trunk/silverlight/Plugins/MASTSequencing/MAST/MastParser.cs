// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 2.1.3314.24787
//    <NameSpace>org.OpenVideoPlayer.Advertising.MAST</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><HidePrivateFieldInIDE>True</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><IncludeSerializeMethod>True</IncludeSerializeMethod><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><DisableDebug>False</DisableDebug><CustomUsings></CustomUsings>
//  <auto-generated>
// ------------------------------------------------------------------------------
namespace org.OpenVideoPlayer.Advertising.MAST {
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
using System.Xml.Serialization;


	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
	[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://openvideoplayer.sf.net/mast")]
	[System.Xml.Serialization.XmlRootAttribute(Namespace = "http://openvideoplayer.sf.net/mast", IsNullable = false)]
	public partial class MAST {

		[EditorBrowsable(EditorBrowsableState.Never)]
		private List<Trigger> triggersField;

		/// <summary>
		/// .ctor class constructor
		/// </summary>
		public MAST() {
			if ((this.triggersField == null)) {
				this.triggersField = new List<Trigger>();
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlArrayItemAttribute("trigger", IsNullable = false)]
		public List<Trigger> Triggers {
			get {
				return this.triggersField;
			}
			set {
				this.triggersField = value;
			}
		}

		/// <summary>
		/// Serializes current MAST object into an XML document
		/// </summary>
		// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
			System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
			xmlSerializer.Serialize(memoryStream, this);
			memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
			System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
			return streamReader.ReadToEnd();
		}

		/// <summary>
		/// Deserializes workflow markup into an MAST object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output MAST object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out MAST obj, out System.Exception exception) {
			exception = null;
			obj = null;
			try {
				System.IO.StringReader stringReader = new System.IO.StringReader(xml);
				System.Xml.XmlReader xmlTextReader = System.Xml.XmlReader.Create(stringReader);
				System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(MAST));
				obj = ((MAST)(xmlSerializer.Deserialize(xmlTextReader)));
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		/// <summary>
		/// Serializes current MAST object into file
		/// </summary>
		// <param name="fileName">full path of outupt xml file</param>
		// <param name="exception">output Exception value if failed</param>
		// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				System.IO.StreamWriter streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		/// <summary>
		/// Deserializes workflow markup from file into an MAST object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output MAST object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out MAST obj, out System.Exception exception) {
			exception = null;
			obj = null;
			try {
				System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				System.IO.StreamReader sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString, out obj, out exception);
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://openvideoplayer.sf.net/mast")]
	public partial class Trigger :IMastTrigger{

		[EditorBrowsable(EditorBrowsableState.Never)]
		private List<Condition> conditionField;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private Duration durationField;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private Source sourceField;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private List<Target> targetField;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private string idField;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private string descriptionField;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private TriggerBehavior behaviorField;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private bool behaviorFieldSpecified;

		/// <summary>
		/// .ctor class constructor
		/// </summary>
		public Trigger() {
			if ((this.targetField == null)) {
				this.targetField = new List<Target>();
			}
			if ((this.sourceField == null)) {
				this.sourceField = new Source();
			}
			if ((this.durationField == null)) {
				this.durationField = new Duration();
			}
			if ((this.conditionField == null)) {
				this.conditionField = new List<Condition>();
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlElementAttribute("condition")]
		public List<Condition> condition {
			get {
				return this.conditionField;
			}
			set {
				this.conditionField = value;
			}
		}

		/// <remarks/>
		public Duration duration {
			get {
				return this.durationField;
			}
			set {
				this.durationField = value;
			}
		}
		[XmlIgnore]
		public List<IMastTarget> Target { get { return new List<IMastTarget>(target.ToArray()); } }
		[XmlIgnore]
		public IMastSource Source { get { return source as IMastSource; } }

			/// <remarks/>
		public Source source {
			get {
				return this.sourceField;
			}
			set {
				this.sourceField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlElementAttribute("target")]
		public List<Target> target {
			get {
				return this.targetField;
			}
			set {
				this.targetField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string id {
			get {
				return this.idField;
			}
			set {
				this.idField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string description {
			get {
				return this.descriptionField;
			}
			set {
				this.descriptionField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public TriggerBehavior behavior {
			get {
				return this.behaviorField;
			}
			set {
				this.behaviorField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool behaviorSpecified {
			get {
				return this.behaviorFieldSpecified;
			}
			set {
				this.behaviorFieldSpecified = value;
			}
		}

		/// <summary>
		/// Serializes current Trigger object into an XML document
		/// </summary>
		// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
			System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
			xmlSerializer.Serialize(memoryStream, this);
			memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
			System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
			return streamReader.ReadToEnd();
		}

		/// <summary>
		/// Deserializes workflow markup into an Trigger object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output Trigger object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out Trigger obj, out System.Exception exception) {
			exception = null;
			obj = null;
			try {
				System.IO.StringReader stringReader = new System.IO.StringReader(xml);
				System.Xml.XmlReader xmlTextReader = System.Xml.XmlReader.Create(stringReader);
				System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(Trigger));
				obj = ((Trigger)(xmlSerializer.Deserialize(xmlTextReader)));
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		/// <summary>
		/// Serializes current Trigger object into file
		/// </summary>
		// <param name="fileName">full path of outupt xml file</param>
		// <param name="exception">output Exception value if failed</param>
		// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				System.IO.StreamWriter streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		/// <summary>
		/// Deserializes workflow markup from file into an Trigger object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output Trigger object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out Trigger obj, out System.Exception exception) {
			exception = null;
			obj = null;
			try {
				System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				System.IO.StreamReader sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString, out obj, out exception);
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://openvideoplayer.sf.net/mast")]
	public partial class Condition {

		[EditorBrowsable(EditorBrowsableState.Never)]
		private List<Condition> conditionField;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private ConditionClass classField;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private bool classFieldSpecified;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private string varField;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private string valueField;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private Operator operatorField;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private bool operatorFieldSpecified;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private Modifier modifierField;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private bool modifierFieldSpecified;

		/// <summary>
		/// .ctor class constructor
		/// </summary>
		public Condition() {
			if ((this.conditionField == null)) {
				this.conditionField = new List<Condition>();
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlElementAttribute("condition")]
		public List<Condition> condition {
			get {
				return this.conditionField;
			}
			set {
				this.conditionField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public ConditionClass @class {
			get {
				return this.classField;
			}
			set {
				this.classField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool classSpecified {
			get {
				return this.classFieldSpecified;
			}
			set {
				this.classFieldSpecified = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string var {
			get {
				return this.varField;
			}
			set {
				this.varField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string value {
			get {
				return this.valueField;
			}
			set {
				this.valueField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public Operator @operator {
			get {
				return this.operatorField;
			}
			set {
				this.operatorField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool operatorSpecified {
			get {
				return this.operatorFieldSpecified;
			}
			set {
				this.operatorFieldSpecified = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public Modifier modifier {
			get {
				return this.modifierField;
			}
			set {
				this.modifierField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool modifierSpecified {
			get {
				return this.modifierFieldSpecified;
			}
			set {
				this.modifierFieldSpecified = value;
			}
		}

		/// <summary>
		/// Serializes current Condition object into an XML document
		/// </summary>
		// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
			System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
			xmlSerializer.Serialize(memoryStream, this);
			memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
			System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
			return streamReader.ReadToEnd();
		}

		/// <summary>
		/// Deserializes workflow markup into an Condition object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output Condition object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out Condition obj, out System.Exception exception) {
			exception = null;
			obj = null;
			try {
				System.IO.StringReader stringReader = new System.IO.StringReader(xml);
				System.Xml.XmlReader xmlTextReader = System.Xml.XmlReader.Create(stringReader);
				System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(Condition));
				obj = ((Condition)(xmlSerializer.Deserialize(xmlTextReader)));
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		/// <summary>
		/// Serializes current Condition object into file
		/// </summary>
		// <param name="fileName">full path of outupt xml file</param>
		// <param name="exception">output Exception value if failed</param>
		// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				System.IO.StreamWriter streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		/// <summary>
		/// Deserializes workflow markup from file into an Condition object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output Condition object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out Condition obj, out System.Exception exception) {
			exception = null;
			obj = null;
			try {
				System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				System.IO.StreamReader sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString, out obj, out exception);
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://openvideoplayer.sf.net/mast")]
	public enum ConditionClass {

		/// <remarks/>
		property,

		/// <remarks/>
		@event,
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://openvideoplayer.sf.net/mast")]
	public enum Operator {

		/// <remarks/>
		EQ,

		/// <remarks/>
		GTR,

		/// <remarks/>
		GEQ,

		/// <remarks/>
		LT,

		/// <remarks/>
		LEQ,

		/// <remarks/>
		MOD,
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://openvideoplayer.sf.net/mast")]
	public enum Modifier {

		/// <remarks/>
		NOT,
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://openvideoplayer.sf.net/mast")]
	public partial class Target : IMastTarget {

		[EditorBrowsable(EditorBrowsableState.Never)]
		private string regionField;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private string typeField;

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string region {
			get {
				return this.regionField;
			}
			set {
				this.regionField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string type {
			get {
				return this.typeField;
			}
			set {
				this.typeField = value;
			}
		}

		/// <summary>
		/// Serializes current Target object into an XML document
		/// </summary>
		// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
			System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
			xmlSerializer.Serialize(memoryStream, this);
			memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
			System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
			return streamReader.ReadToEnd();
		}

		/// <summary>
		/// Deserializes workflow markup into an Target object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output Target object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out Target obj, out System.Exception exception) {
			exception = null;
			obj = null;
			try {
				System.IO.StringReader stringReader = new System.IO.StringReader(xml);
				System.Xml.XmlReader xmlTextReader = System.Xml.XmlReader.Create(stringReader);
				System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(Target));
				obj = ((Target)(xmlSerializer.Deserialize(xmlTextReader)));
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		/// <summary>
		/// Serializes current Target object into file
		/// </summary>
		// <param name="fileName">full path of outupt xml file</param>
		// <param name="exception">output Exception value if failed</param>
		// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				System.IO.StreamWriter streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		/// <summary>
		/// Deserializes workflow markup from file into an Target object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output Target object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out Target obj, out System.Exception exception) {
			exception = null;
			obj = null;
			try {
				System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				System.IO.StreamReader sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString, out obj, out exception);
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://openvideoplayer.sf.net/mast")]
	public partial class Source : IMastSource {

		[EditorBrowsable(EditorBrowsableState.Never)]
		private string uriField;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private string idField;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private string formatField;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private bool allowskipField;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private bool allowskipFieldSpecified;

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "anyURI")]
		public string uri {
			get {
				return this.uriField;
			}
			set {
				this.uriField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string id {
			get {
				return this.idField;
			}
			set {
				this.idField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public string format {
			get {
				return this.formatField;
			}
			set {
				this.formatField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public bool allowskip {
			get {
				return this.allowskipField;
			}
			set {
				this.allowskipField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool allowskipSpecified {
			get {
				return this.allowskipFieldSpecified;
			}
			set {
				this.allowskipFieldSpecified = value;
			}
		}

		/// <summary>
		/// Serializes current Source object into an XML document
		/// </summary>
		// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
			System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
			xmlSerializer.Serialize(memoryStream, this);
			memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
			System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
			return streamReader.ReadToEnd();
		}

		/// <summary>
		/// Deserializes workflow markup into an Source object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output Source object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out Source obj, out System.Exception exception) {
			exception = null;
			obj = null;
			try {
				System.IO.StringReader stringReader = new System.IO.StringReader(xml);
				System.Xml.XmlReader xmlTextReader = System.Xml.XmlReader.Create(stringReader);
				System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(Source));
				obj = ((Source)(xmlSerializer.Deserialize(xmlTextReader)));
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		/// <summary>
		/// Serializes current Source object into file
		/// </summary>
		// <param name="fileName">full path of outupt xml file</param>
		// <param name="exception">output Exception value if failed</param>
		// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				System.IO.StreamWriter streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		/// <summary>
		/// Deserializes workflow markup from file into an Source object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output Source object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out Source obj, out System.Exception exception) {
			exception = null;
			obj = null;
			try {
				System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				System.IO.StreamReader sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString, out obj, out exception);
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://openvideoplayer.sf.net/mast")]
	public partial class Duration {

		[EditorBrowsable(EditorBrowsableState.Never)]
		private DurationType typeField;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private bool typeFieldSpecified;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private System.DateTime timeField;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private bool timeFieldSpecified;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private System.DateTime dateField;

		[EditorBrowsable(EditorBrowsableState.Never)]
		private bool dateFieldSpecified;

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute()]
		public DurationType type {
			get {
				return this.typeField;
			}
			set {
				this.typeField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool typeSpecified {
			get {
				return this.typeFieldSpecified;
			}
			set {
				this.typeFieldSpecified = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "time")]
		public System.DateTime time {
			get {
				return this.timeField;
			}
			set {
				this.timeField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool timeSpecified {
			get {
				return this.timeFieldSpecified;
			}
			set {
				this.timeFieldSpecified = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
		public System.DateTime date {
			get {
				return this.dateField;
			}
			set {
				this.dateField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlIgnoreAttribute()]
		public bool dateSpecified {
			get {
				return this.dateFieldSpecified;
			}
			set {
				this.dateFieldSpecified = value;
			}
		}

		/// <summary>
		/// Serializes current Duration object into an XML document
		/// </summary>
		// <returns>string XML value</returns>
		public virtual string Serialize() {
			System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
			System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
			xmlSerializer.Serialize(memoryStream, this);
			memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
			System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
			return streamReader.ReadToEnd();
		}

		/// <summary>
		/// Deserializes workflow markup into an Duration object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output Duration object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool Deserialize(string xml, out Duration obj, out System.Exception exception) {
			exception = null;
			obj = null;
			try {
				System.IO.StringReader stringReader = new System.IO.StringReader(xml);
				System.Xml.XmlReader xmlTextReader = System.Xml.XmlReader.Create(stringReader);
				System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(Duration));
				obj = ((Duration)(xmlSerializer.Deserialize(xmlTextReader)));
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		/// <summary>
		/// Serializes current Duration object into file
		/// </summary>
		// <param name="fileName">full path of outupt xml file</param>
		// <param name="exception">output Exception value if failed</param>
		// <returns>true if can serialize and save into file; otherwise, false</returns>
		public virtual bool SaveToFile(string fileName, out System.Exception exception) {
			exception = null;
			try {
				string xmlString = Serialize();
				System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
				System.IO.StreamWriter streamWriter = xmlFile.CreateText();
				streamWriter.WriteLine(xmlString);
				streamWriter.Close();
				return true;
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}

		/// <summary>
		/// Deserializes workflow markup from file into an Duration object
		/// </summary>
		// <param name="xml">string workflow markup to deserialize</param>
		// <param name="obj">Output Duration object</param>
		// <param name="exception">output Exception value if deserialize failed</param>
		// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
		public static bool LoadFromFile(string fileName, out Duration obj, out System.Exception exception) {
			exception = null;
			obj = null;
			try {
				System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
				System.IO.StreamReader sr = new System.IO.StreamReader(file);
				string xmlString = sr.ReadToEnd();
				sr.Close();
				file.Close();
				return Deserialize(xmlString, out obj, out exception);
			} catch (System.Exception e) {
				exception = e;
				return false;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://openvideoplayer.sf.net/mast")]
	public enum DurationType {

		/// <remarks/>
		relative,

		/// <remarks/>
		absolute,
	}

	/// <remarks/>
	//[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
	//[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://openvideoplayer.sf.net/mast")]
	//public enum TriggerBehavior {

	//    /// <remarks/>
	//    replace,

	//    /// <remarks/>
	//    combine,

	//    /// <remarks/>
	//    bypass,

	//    /// <remarks/>
	//    stack,
	//}
}
