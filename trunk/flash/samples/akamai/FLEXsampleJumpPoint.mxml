<?xml version="1.0" encoding="utf-8"?>
<!--
//
// Copyright (c) 2008, the Open Video Player authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions are 
// met:
//
//    * Redistributions of source code must retain the above copyright 
//		notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above 
//		copyright notice, this list of conditions and the following 
//		disclaimer in the documentation and/or other materials provided 
//		with the distribution.
//    * Neither the name of the openvideoplayer.org nor the names of its 
//		contributors may be used to endorse or promote products derived 
//		from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"  applicationComplete="init()" backgroundGradientColors="[#808080, #c0c0c0]">
	<mx:states>
		<mx:State name="playing">
			<mx:AddChild position="lastChild">
				<mx:DataGrid x="501" y="142" height="391" dataProvider="{metadata}" width="285">
					<mx:columns>
						<mx:DataGridColumn headerText="Property" dataField="name" width="110"/>
						<mx:DataGridColumn headerText="Value" dataField="value"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="501" y="119" text="MetaData of last segment"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:ProgressBar id="loadProgress" x="55" y="419" width="400" height="10"  label=""  indeterminate="true" labelPlacement="center" />
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button x="59" y="451" label="PAUSE" click="doPlayPause()" id="bPlayPause"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="266" y="390" text="00:00|00:00" fontWeight="bold" fontSize="15" fontFamily="Verdana" id="timeDisplay"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button x="55" y="413" width="10" id="knob"  addedToStage="setStageListener()" buttonDown="startDragging()"  />
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:HRule x="55" y="422" width="400" height="5" strokeColor="#000000" id="positionback"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:CheckBox x="55" y="119" label="Stop download on pause" selected="false" id="cbStopDownload" click="changePauseMode()"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="54" y="391" id="statusDisplay" text="WAITING"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:HBox x="54" y="145" width="320" height="240" id="videoHolder">
				</mx:HBox>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	<mx:ComboBox x="54" y="50" width="737" id="cbList"  selectedIndex="0"  change="address.text = cbList.selectedLabel"/>
	<mx:Button x="796" y="75" label="LOAD" id="bLoad" click="doLoad()"/>
	<mx:Label x="54" y="29" text="Enter the file you would like to play by typing it into the input field or selecting a file from the list below:" id="label1"/>
	<mx:Label x="54" y="4" text="Akamai JumpPoint Technology Demonstrator" fontSize="16" fontWeight="bold" color="#ffffff"/>
	<mx:TextInput x="55" y="75" width="733" id="address"/>
	<mx:Script>
		<![CDATA[
			// JumpPoint FLEX Reference Player. This player demonstrates integration between the
			// Akamai JumpPoint(tm) service for progressive Flash video delivery and the AkamaiEnhancedNetStream
			// class. The UI is kept intentionally simple in order to illustrate how the class
			// and service work together to deliver the instant-progressive seek capabilities of JumpPoint(tm).
			// 
			// Disclaimer - this code is provided for reference only. It is not supported by
			// Akamai Customer Care and should be fully QA'd before being released into a production environment.

			// Imports
			import mx.messaging.messages.ErrorMessage;
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.controls.Alert;
			
			import org.openvideoplayer.net.AkamaiEnhancedNetStream;
			
			//Declare vars
			private var video:Video;
			private var ns:AkamaiEnhancedNetStream;
			private var timer:Timer;
			private var dragging:Boolean;
			
			[Bindable]
			private var metadata:ArrayCollection;
			
			//Declare constants
			private const PROGRESSTOTALLENGTH:Number = 400;
			private const PROGRESSSTARTX:Number = 55;
			
			//Initialize the player
			private function init():void {
				var list:Array = ["http://products.edgeboss.net/download/products/media_framework/flash/content/test/jp/tahiti_512K_CBR_2sec.flv",
				"http://products.edgeboss.net/download/products/media_framework/flash/content/test/jp/nocc_320x180_548kbps.flv",
				"http://products.edgeboss.net/download/products/mediaframework/fms/asp_final_700k.flv"];
				cbList.dataProvider = list;
				address.text = list[0];
				// Establish the NetConnection
				var nc:NetConnection = new NetConnection();
				nc.connect(null);
				// Establish the NetStream
				ns = new AkamaiEnhancedNetStream(nc);
				ns.addEventListener(NetStatusEvent.NET_STATUS,handleNetStatus);
				ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR,handleAsyncError);
				ns.addEventListener(IOErrorEvent.IO_ERROR,handleIOError);
				// This is the only new event which the class introduces
				ns.addEventListener("stateChange",handleStateChange);
				ns.bufferTime = 1;
				ns.client = this;
				dragging = false;
				metadata = new ArrayCollection();
				timer = new Timer(250);
				timer.addEventListener(TimerEvent.TIMER,update);
			}
			
			// Handle state changes in the EnhancedNetStream
			private function handleStateChange(e:NetStatusEvent):void {
				statusDisplay.text = e.info.toString();
				switch (e.info) {
					case ns.STATE_ENDED:;
						bPlayPause.label = "PLAY";
						break;
					case ns.STATE_PLAYING:
						dragging = false;
						break;
					case ns.STATE_PAUSED:
						dragging = false;
						break;
					case ns.STATE_BUFFERING:
						loadProgress.visible = true;
						break;
					case ns.STATE_STOPPED:
						loadProgress.visible = false;
						break;
				}
			}
			// Listen for mouse-up on the drag handle
			private function setStageListener():void {
				knob.stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
			}
			// Catch mouse-events when the user releases the mouse away from the drag-handle
			private function mouseUpHandler(e:MouseEvent):void {
				if (dragging) {
					doScrub();
				}
			}
			// Updates UI as video plays
			private function update(e:TimerEvent):void {
				if (!isNaN(ns.time) && !isNaN(ns.duration)) {
					if (!dragging) {
						knob.x = ((ns.time/ns.duration)*400)+45;
						timeDisplay.text= ns.timeAsTimeCode + "|"+ns.durationAsTimeCode;
					} else {
						timeDisplay.text= ns.convertToTimeCode((knob.x-45)*ns.duration/400) + "|"+ns.durationAsTimeCode;
					}
				}
				if (ns.bytesTotal > 0) {
					loadProgress.width = ns.segmentLoadRatio*PROGRESSTOTALLENGTH;
				}
			}
			// Initiates playback of a new file
			private function doLoad():void {
				currentState = "playing";
				bPlayPause.label = "PAUSE";
				// Add the video to the stage if it hasn't already been added
				if (!(video is Video)) {
					trace("adding video");
					video = new Video(320,240);
					video.smoothing = true;
					var UIC:UIComponent = new UIComponent();
					UIC.addChild(video);
					videoHolder.addChild(UIC);
					video.attachNetStream(ns);
				}
				ns.play(address.text);
				if (!timer.running) {
					timer.start();
				}
			}
			// Handle the start of drag for the drag handle
			private function startDragging():void {
				dragging = true;
				knob.startDrag(false, new Rectangle(45,413,400,0));
			}
			// Handle IO Errors thrown by the AkamaiEnhancedNetStream class
			private function handleIOError(e:IOErrorEvent):void {
				Alert.show(e.text, "IO Error");
			}
			// Handle AsyncError Errors thrown by the AkamaiEnhancedNetStream class
			private function handleAsyncError(e:AsyncErrorEvent):void {
				Alert.show(e.text, "Async Error");
			}
			// Handle NetStatus events thrown by the AkamaiEnhancedNetStream class
			private function handleNetStatus(e:NetStatusEvent):void {
				switch (e.info.code) {
					case "NetStream.Play.StreamNotFound":
					Alert.show("The file you are trying to play cannot be located on the server", "Error");
				}
			}
			// Catch any cue points that may be embedded in the video
			public function onCuePoint(e:Object):void {
			}
			// Catch the metadata that is contained within the video
			public function onMetaData(info:Object):void {
				metadata.removeAll();
				for (var propName:String in info) {
					metadata.addItem({name:propName,value:info[propName]});
				}
				// Position the load progress bar
				loadProgress.x = ((ns.segmentStartTime/ns.duration)*PROGRESSTOTALLENGTH)+PROGRESSSTARTX;
				loadProgress.width = 0;
				// Scale the video - trust the video peoperties rather than the metadata values
				if (ns.width/ns.height >= 4/3) {
						video.width = 320;
						video.height = 320*ns.height/ns.width;
					} else {
						video.height = 240
						video.width = 240*ns.width/ns.height;
				} 
			}
			// Handle scrubbing
			private function doScrub():void {
				knob.stopDrag();
				if (ns.state == ns.STATE_ENDED){
					bPlayPause.label = "PAUSE";
				}
				trace("seeking to " + (knob.x-45)*ns.duration/400 + " from x= "+ knob.x);
				ns.seek((knob.x-45)*ns.duration/400);
			}
			// Handle the play/pause button press
			private function doPlayPause():void {
				if (bPlayPause.label == "PLAY") {
					bPlayPause.label = "PAUSE";
					if (ns.state == ns.STATE_ENDED) {
						ns.play(cbList.selectedLabel);
					} else {
						ns.resume();
					}
				} else {
					bPlayPause.label = "PLAY";
					ns.pause();
				}
			}
			// Change the stop-on-pause behavior of the class
			private function changePauseMode():void {
				ns.stopOnPause = cbStopDownload.selected;
			}
			// Format the drag handle data tip
			private function dataTip(value:Number):String { 	
		          return   ns.convertToTimeCode(value);
		     }

		]]>
	</mx:Script>
	

</mx:Application>

