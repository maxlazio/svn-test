<?xml version="1.0" encoding="utf-8"?>
<!--
//
// Copyright (c) 2009, the Open Video Player authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions are 
// met:
//
//    * Redistributions of source code must retain the above copyright 
//		notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above 
//		copyright notice, this list of conditions and the following 
//		disclaimer in the documentation and/or other materials provided 
//		with the distribution.
//    * Neither the name of the openvideoplayer.org nor the names of its 
//		contributors may be used to endorse or promote products derived 
//		from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" creationComplete="init()" viewSourceURL="srcview/index.html">
	<mx:Canvas x="10" y="4" width="740" height="358" backgroundAlpha="0.09" backgroundColor="#000000">
		<mx:Form x="10" y="3" width="370" height="211">
		<mx:FormHeading label="Live Stream Details" textAlign="left"/>
        <mx:FormItem label="Host name">
            <mx:TextInput id="hostName" width="100%" text="{HOSTNAME}"/>
        </mx:FormItem>
        <mx:FormItem label="Stream name">
            <mx:TextInput id="streamName" width="100%" text="{STREAMNAME}"/>
        </mx:FormItem>
        <mx:FormItem label="Connection Auth Params*">
            <mx:TextInput id="connectionAuth" width="100%" text="auth=wwww&amp;aifp=xxxx"/>
        </mx:FormItem>
        <mx:FormItem label="Stream Auth Params*">
            <mx:TextInput id="streamAuth" width="100%" text="auth=yyyy&amp;aifp=zzzz"/>
        </mx:FormItem>
        <mx:FormItem label="*Only for secure streams">
            <mx:Button id="bStart" label="Start" click="startPlayback(hostName.text,streamName.text,connectionAuth.text)"/>
        </mx:FormItem>
		</mx:Form>
		<mx:VBox id="player"  x="379" y="45" height="294" width="351" borderStyle="none" horizontalAlign="center" verticalAlign="top" >
		  <mx:HBox width="320" height="240" id="videoWindow" borderStyle="none" verticalAlign="middle" horizontalAlign="center" backgroundColor="#000000"/>   	
		  	<mx:ApplicationControlBar width="320" id="applicationcontrolbar1">
		        <mx:Button id="bPlayPause" enabled="false" label="PAUSE" click="doPlayPause()"/>
		        <mx:Button id="bUnsubscribe" enabled ="false" label="UNSUBSCRIBE" click="unsubscribe()" 
		        	visible="{_showUnsubscribeBtn}" includeInLayout="{_showUnsubscribeBtn}"/>		        
		        <mx:Button label="MUTE" width="58" enabled="false" id="bMute" click="doMute()"/>
		        <mx:Spacer width="100%" />
		        <mx:Text id="timeDisplay"  text="00:00"  fontWeight="bold"/>
    		</mx:ApplicationControlBar>
		</mx:VBox>
		<mx:TextArea x="10" y="239" width="361" height="109" id="output"/>
		<mx:Label x="10" y="213" text="Status:"/>
	</mx:Canvas>
	
	<mx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.controls.Alert;

			import org.openvideoplayer.net.*;
			import org.openvideoplayer.events.*;
			
			import com.akamai.net.*;
			import com.akamai.rss.*;
			
			private const HOSTNAME:String = "cp34973.live.edgefcs.net/live";
			private const STREAMNAME:String = "Flash_Live_Benchmark@632";

			// Define variables
			private var _nc:AkamaiConnection;
			private var _ns:AkamaiNetStream;
			private var _filename:String;
			private var _video:Video;
			private var _videoHolder:UIComponent;
			[Bindable]
			private var _showUnsubscribeBtn:Boolean;
			
			// Init, called when application creation is complete
			private function init():void {
				_showUnsubscribeBtn = false;
				_nc = new AkamaiConnection();
				
				_nc.addEventListener(OvpEvent.ERROR, errorHandler);
				_nc.addEventListener(OvpEvent.BANDWIDTH, bandwidthHandler);
				_nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				
				addVideoToStage();			
			}
			// Commences connection to the live stream
			private function startPlayback(hostname:String,streamname:String,connectionAuthParams:String):void {
				_filename = streamname;
				_nc.connectionAuth = connectionAuthParams;
				_nc.connect(hostname);
				bStart.enabled = false;
				write("Connecting to server ...");
			}
			// Handles a successfull connection to the server
			private function connectedHandler():void {
				write("Successfully connected to: " + _nc.netConnection.uri);
				write("Port: " + _nc.actualPort);
				write("Protocol: " + _nc.actualProtocol);
				write("IP address: " + _nc.serverIPaddress);
				
				_nc.detectBandwidth();
											
				_ns = new AkamaiNetStream(_nc);	
				_ns.liveStreamAuthParams = streamAuth.text;

				// If the server requires us to subscribe to live streams, we need a few more event handlers
				if (_nc.subscribeRequiredForLiveStreams) {
					_showUnsubscribeBtn = true;
					_ns.addEventListener(OvpEvent.SUBSCRIBED, subscribedHandler);
					_ns.addEventListener(OvpEvent.UNSUBSCRIBED, unsubscribedHandler);
					_ns.addEventListener(OvpEvent.SUBSCRIBE_ATTEMPT, subscribeAttemptHandler);
				}
					 
				_ns.addEventListener(OvpEvent.PROGRESS, update);  
				_ns.addEventListener(NetStatusEvent.NET_STATUS, streamStatusHandler);
				_ns.addEventListener(OvpEvent.NETSTREAM_PLAYSTATUS, streamPlayStatusHandler);
				_ns.addEventListener(OvpEvent.NETSTREAM_METADATA, metadataHandler);
				
				_ns.maxBufferLength = 1;
				_ns.streamTimeout = 10;
				_video.attachNetStream(_ns);
				
				playVideo(_filename);
			}
			// Handles errors
			private function errorHandler(e:OvpEvent):void {
				write("Error event [" + e.data.errorNumber+ "]: " + e.data.errorDescription);
				if (e.data.errorNumber == OvpError.STREAM_NOT_FOUND) {
					Alert.show("Connected to the server at " + _nc.serverIPaddress + " but timed-out trying to locate the live stream " + _filename, "UNABLE TO FIND STREAM ", Alert.OK);
				}
				bStart.enabled = true;
			}
			// Displays the result of the bandwidth measurement
			private function bandwidthHandler(e:OvpEvent):void {
				write("Bandwidth measured at " + e.data.bandwidth+ " kbps and latency is " + e.data.latency + " ms.");
			}
			// Receives all status events dispatched by the active NetConnection
			private function netStatusHandler(e:NetStatusEvent):void {
				write(e.info.code);
				switch (e.info.code) {
					case "NetConnection.Connect.Rejected":
						write("Rejected by server. Reason is "+e.info.description);
						break;
					case "NetConnection.Connect.Success":
						connectedHandler();
						break;
				}
				
			}
			// Receives all status events dispatched by the active NetStream
			private function streamStatusHandler(e:NetStatusEvent):void {		
				write(e.info.code);	
				if (_nc.subscribeRequiredForLiveStreams)
					return;
				switch (e.info.code) {
					case "NetStream.Play.Start":
						subscribedHandler(null);
						break;
					case "NetStream.Play.Stop":
						unsubscribedHandler(null);
						break;
				}
			}
			// Receives all onPlayStatus events dispatched by the active NetStream
			private function streamPlayStatusHandler(e:OvpEvent):void {
				write(e.data.code);
			}
			// Receives all onMetadata events dispatched by the active NetStream
			private function metadataHandler(e:OvpEvent):void {
				for (var propName:String in e.data) {
					write("metadata: "+propName+" = "+e.data[propName]);
					if (propName == "width" && Number(e.data[propName]) != videoWindow.width) {
						_videoHolder.width = _video.width  = Number(e.data[propName]);
					}
					if (propName == "height" && Number(e.data[propName]) != videoWindow.height) {
						_videoHolder.height = _video.height = Number(e.data[propName]);
					}
				}
			}
	
			// Handles a successfull subscription to a live stream
			private function subscribedHandler(e:OvpEvent):void {
				write("Successfully subscribed to the live stream");
				bUnsubscribe.enabled = true;
				bPlayPause.enabled = true;
				bMute.enabled = true;
			}
			
			// Handles unsubscription from a live stream
			private function unsubscribedHandler(e:OvpEvent):void {
				write("Unubscribed from the live stream");
				bUnsubscribe.enabled = false;
				bPlayPause.enabled = false;
				bMute.enabled = false;
				bStart.enabled = true;
			}
			
			// Notifies the user that the class is making another attempt to subscribe to a live stream
			private function subscribeAttemptHandler(e:OvpEvent):void {
				write("Attempting to subscribe to the live stream ...");
			}
			
			private function unsubscribe():void {
				_ns.unsubscribe();
			}
			
			// Adds the video to the stage
			private function addVideoToStage():void {
				_videoHolder= new UIComponent();
				_videoHolder.setActualSize(320,240);
				_video = new Video(320,240);
				_video.x = -160;
				_video.y = -120;
				_videoHolder.addChild(_video);
        		videoWindow.addChild(_videoHolder);
   			}
   			
   			// Plays a new video and starts the update timer
   			private function playVideo(name:String):void {
   				_ns.play(name);
   				
   			}
   			// Updates the time display
   			private function update(e:OvpEvent):void {
   				timeDisplay.text = _ns.timeAsTimeCode;
   				//trace("in update() - _ns.isBuffering = "+_ns.isBuffering);
			
   			}
			// Handles play and pause
   			private function doPlayPause():void {
   				switch (bPlayPause.label){
   					case "PAUSE":
	   					bPlayPause.label = "PLAY";
	   					_ns.pause();
	   					break;
   					case "PLAY":
	   					bPlayPause.label = "PAUSE";
	   					_ns.resume();
	   					break;
   				}
   			}
   			// Handles mute and unmute
   			private function doMute():void {
   				switch (bMute.label){
   					case "MUTE":
   					bMute.label = "UNMUTE";
   					_ns.volume = 0;
   					break;
   					case "UNMUTE":
   					bMute.label = "MUTE";
   					_ns.volume = 1;
   					break;
   				}
   			}
			// Writes trace statements to the output display
			private function write(msg:String):void {
				output.text += msg + "\n";
				output.verticalScrollPosition = output.maxVerticalScrollPosition+1;
			}
		]]>
	</mx:Script>
	

</mx:Application>
