This is a brief introduction to writing plug-ins, and specifically ad connectors, for the Silverlight OpenVideoPlayer.

OVP is designed to do as much as possible without modifying the OpenVideoPlayer project or player control.  It is externally themable with xaml template files, and also supports loading plug-ins from a url - allowing extension for new types of media containers, protocols, or content.

There is an interface, IPlugin that is defined in the OVPDefinitions project.  All plugins must implement the IPlugin interface, and reference OVPDefinitions.dll.  Beyond that, a plugin is free to do nearly anything within the confines of the Silverlight runtime.  The player loads plugins that are specified by the InitParams passed to the Silverlight Object, for example: 'plugins=plugins/AdaptiveEdge.xap' would load that xap file (assuming a relative url from the current site), dynamically load the xap and the dlls within, and search for any types that correctly implement IPlugin.  Once loaded, a plugin is given a reference to the hosting player through the Player property of IPlugin, giving a chance to do initialization like wiring up events, etc.  Plugins can be provided as either dll or xap.

Another example of a plugin is UIFAdConnector, which is designed to pull ads from EyeWonder.  While some plugins may require a derived interface (like IAlternateSource : IPlugin) because of the need for tighter coupling with the player, many - including ad connectors, can provide needed functionality with just what is included in IPlugin.  There is a seperate solution for plugins (plugins.sln) as they should not be referenced by the player solution - it does not need or want prior knowledge of them.  The AdaptiveEdge project is not included as the source is not yet distributable, but the binary is included for testing with AdaptiveEdge SmoothStreaming.  The solution may give an error that the project is not found, this can be ignored.

In the case of UIFAdConnector there are initial parameters it pulls from the InitParams to specify the ad tags to load, etc.  These are qualified by plugin name to prevent collisions (eg. UIFAdConnector:AdTags=content/adtags.xml).  The full implementation for the UIF Ad connector, including the hosting page/site, is available for SmoothHD.com.  The site with ads has not gone live yet, but can be viewed at http://openvideoplayer.sourceforge.com/rogantest2, and the complete source is in the release package.

As a full life cycle there is Smoothhd.html that is the main (only) page for the site.  It hosts the silverlight project that is built from the OVPImplementation project (ovp.xap).  This xap has multiple top-level user controls in it, the initParam 'type=SmoothHdPage' is required to force it to use the SmoothHd specific code, which is found in OVPImplementation/pages/SmoothHdPage.xaml/cs.  This is the UserControl that is loaded - it is not the player itself - which was not modified for this page, but it instead holds an instance of the player as well as the custom playlist along the bottom.  It also has some custom code-behind for handling playlist logic and a few other items that are page-specific.  The smoothhd example demonstrates how a full-featured page can be built from OVP in a very maintainable fashion.

Within the UIFAdConnector there is a basic sequencing and layout engine that while basic, effecitvely handles ads in the uif format.  The plugin also references the UIF project provided by EyeWonder that retrivies and deserializes the ad, and performs other internal functions for the ad.  There is also source for several Ads that are implemented in the UIF format.  

The OVP team is working on a more comprehensive solution to layout and sequencing that can work across multiple ad platforms, in the meantime this example is a pragmatic approach.  It links ads to content by overloading the comments field in RSS, which is then used to link ads with tags from the maaster tag xml.  This is certainly not the ideal solution, but is very workable for a basic reference.

More documentation is to follow - in the meantime questions can be sent to Nick Brookins - nbrookin at akamai d0t com.