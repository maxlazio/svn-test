<?xml version="1.0" encoding="utf-8"?>
<!--
	 //
	 // Copyright (c) 2009-2010, the Open Video Player authors. All rights reserved.
	 //
	 // Redistribution and use in source and binary forms, with or without
	 // modification, are permitted provided that the following conditions are
	 // met:
	 //
	 //    * Redistributions of source code must retain the above copyright
	 //		notice, this list of conditions and the following disclaimer.
	 //    * Redistributions in binary form must reproduce the above
	 //		copyright notice, this list of conditions and the following
	 //		disclaimer in the documentation and/or other materials provided
	 //		with the distribution.
	 //    * Neither the name of the openvideoplayer.org nor the names of its
	 //		contributors may be used to endorse or promote products derived
	 //		from this software without specific prior written permission.
	 //
	 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 //
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
	backgroundColor="#000000" applicationComplete="init()">
	<mx:Style source="Sample.css"/>
	<mx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.controls.Alert;

			import org.openvideoplayer.net.*;
			import org.openvideoplayer.events.*;

			import com.akamai.net.*;
			import com.akamai.rss.*;

			private const HOSTNAME:String = "cp34973.live.edgefcs.net/live";
			private const STREAMNAME:String = "Flash_live_bm_500K@9319";
			private const AUTH_TOKENS:String = "auth=yyyy&amp;aifp=zzzz";
				
			private const VIDEO_DEFAULT_WIDTH:int = 320;
			private const VIDEO_DEFAULT_HEIGHT:int = 240;
			private const VIDEO_CONTAINER_DEFAULT_WIDTH_DIFF:int = 11;
			private const VIDEO_CONTAINER_DEFAULT_HEIGHT_DIFF:int = 11;
			private const VIDEO_CONTAINER_DEFAULT_WIDTH:int = VIDEO_DEFAULT_WIDTH + VIDEO_CONTAINER_DEFAULT_WIDTH_DIFF;
			private const VIDEO_CONTAINER_DEFAULT_HEIGHT:int = VIDEO_DEFAULT_HEIGHT + VIDEO_CONTAINER_DEFAULT_HEIGHT_DIFF;

			// Define variables
			private var _nc:AkamaiConnection;
			private var _ns:AkamaiNetStream;
			private var _filename:String;
			private var _video:Video;
			private var _videoHolder:UIComponent;

			// Init, called when application creation is complete
			private function init():void {
				_nc = new AkamaiConnection();

				_nc.addEventListener(OvpEvent.ERROR, errorHandler);
				_nc.addEventListener(OvpEvent.BANDWIDTH, bandwidthHandler);
				_nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);

				uic.setActualSize(VIDEO_DEFAULT_WIDTH, VIDEO_DEFAULT_HEIGHT);
				_video = new Video(VIDEO_DEFAULT_WIDTH, VIDEO_DEFAULT_HEIGHT);
				_video.x = 0;
				_video.y = 0;
				uic.addChild(_video);			
			}

			// Commences connection to the live stream
			private function startPlayback(hostname:String, streamname:String):void {
				_filename = streamname;
				_nc.connect(hostname);
				bStop.enabled = true;
				bStart.enabled = false;
				write("Connecting to server ...");
			}
			
			// Stops playback by closing the stream
			private function stopPlayback():void {
				_ns.close();
				bStop.enabled = false;
				bPlayPause.enabled = false;
				bMute.enabled = false;
				bStart.enabled = true;
			}

			// Handles a successfull connection to the server
			private function connectedHandler():void {
				write("Successfully connected to: " + _nc.netConnection.uri);
				write("Port: " + _nc.actualPort);
				write("Protocol: " + _nc.actualProtocol);
				write("IP address: " + _nc.serverIPaddress);

				_nc.detectBandwidth();
				
				if (streamAuth.text.length || !(_ns is AkamaiNetStream))
				{
					_ns = new AkamaiNetStream(_nc);
					_ns.liveStreamAuthParams = streamAuth.text;
					_ns.addEventListener(OvpEvent.PROGRESS, update);
					_ns.addEventListener(NetStatusEvent.NET_STATUS, streamStatusHandler);
					_ns.addEventListener(OvpEvent.NETSTREAM_PLAYSTATUS, streamPlayStatusHandler);
					_ns.addEventListener(OvpEvent.NETSTREAM_METADATA, metadataHandler);
					_ns.addEventListener(OvpEvent.DATA_MESSAGE, dataMessageHandler);
					_ns.addEventListener(OvpEvent.ERROR, errorHandler);
	
					_ns.maxBufferLength = 1;
					_ns.streamTimeout = 10;
					_video.attachNetStream(_ns);
				}
				_ns.play(_filename);
			}

			// Handles errors
			private function errorHandler(e:OvpEvent):void {
				write("Error event [" + e.data.errorNumber + "]: " + e.data.errorDescription);
				if (e.data.errorNumber == OvpError.STREAM_NOT_FOUND) {
					Alert.show("Connected to the server at " + _nc.serverIPaddress + " but timed-out trying to locate the live stream " + _filename, "UNABLE TO FIND STREAM ", Alert.OK);
				}
				bStart.enabled = true;
				bStop.enabled = false;
			}

			// Displays the result of the bandwidth measurement
			private function bandwidthHandler(e:OvpEvent):void {
				write("Bandwidth measured at " + e.data.bandwidth + " kbps and latency is " + e.data.latency + " ms.");
			}
			
			// Displays any data messages embedded in the stream
			private function dataMessageHandler(e:OvpEvent):void {
				write("Data message received in stream: name=" + e.data.name.toString() + " value=" + e.data.value.toString());
			}

			// Receives all status events dispatched by the active NetConnection
			private function netStatusHandler(e:NetStatusEvent):void {
				write(e.info.code);
				switch (e.info.code) {
					case "NetConnection.Connect.Rejected":
						write("Rejected by server. Reason is " + e.info.description);
						break;
					case "NetConnection.Connect.Success":
						connectedHandler();
						break;
				}

			}

			// Receives all status events dispatched by the active NetStream
			private function streamStatusHandler(e:NetStatusEvent):void {
				write(e.info.code);

				switch (e.info.code) {
					case "NetStream.Buffer.Full":
						bPlayPause.enabled = true;
						bMute.enabled = true;
						break;
					case "NetStream.Play.PublishNotify":
						subscribedHandler(null);
						break;
					case "NetStream.Play.UnpublishNotify":
						unsubscribedHandler(null);
						break;
				}
			}

			// Receives all onPlayStatus events dispatched by the active NetStream
			private function streamPlayStatusHandler(e:OvpEvent):void {
				write(e.data.code);
			}

			// Receives all onMetadata events dispatched by the active NetStream
			private function metadataHandler(e:OvpEvent):void {
				for (var propName:String in e.data) {
					write("metadata: " + propName + " = " + e.data[propName]);
				}

				_video.x = 0;
				_video.y = 0;
				_video.width = e.data.width;
				uic.width = e.data.width + 6;
				_video.height = e.data.height;
				uic.height = e.data.height + 6;	
				
				videoContainer.width = e.data.width + 11;
				videoContainer.height = e.data.height + 11;	
			}
			
			// Handles a successfull subscription to a live stream
			private function subscribedHandler(e:OvpEvent):void {
				write("Successfully subscribed to the live stream");
				bPlayPause.enabled = true;
				bMute.enabled = true;
			}

			// Handles unsubscription from a live stream
			private function unsubscribedHandler(e:OvpEvent):void {
				write("Unubscribed from the live stream");
				bPlayPause.enabled = false;
				bMute.enabled = false;
				
				// Note we don't want to call _ns.close() here
				// because we may have gotten into this function
				// due to an encoder crash. If we call _ns.close(),
				// the stream will not automatically re-start when
				// the encoder re-starts.
			}			
			
			private function unsubscribe():void {
				_ns.unsubscribe();
			}

			// Updates the time display
			private function update(e:OvpEvent):void {
				timeDisplay.text = _ns.timeAsTimeCode;
			}

			// Handles play and pause
			private function doPlayPause():void {
				switch (bPlayPause.label) {
					case "PAUSE":
						bPlayPause.label = "PLAY";
						_ns.pause();
						break;
					case "PLAY":
						bPlayPause.label = "PAUSE";
						_ns.resume();
						break;
				}
			}
			
			// Handles mute and unmute
			private function doMute():void {
				switch (bMute.label) {
					case "MUTE":
						bMute.label = "UNMUTE";
						_ns.volume = 0;
						break;
					case "UNMUTE":
						bMute.label = "MUTE";
						_ns.volume = 1;
						break;
				}
			}

			// Writes trace statements to the output display
			private function write(msg:String):void {
				output.text += msg + "\n";
				output.verticalScrollPosition = output.maxVerticalScrollPosition + 1;
			}
		]]>
	</mx:Script>

	<mx:HBox id="container" paddingLeft="20" paddingTop="20">
		<mx:VBox>
			<mx:Form width="100%">
				<mx:FormHeading label="Live Stream Details" textAlign="left"/>
				<mx:FormItem label="Host name">
					<mx:TextInput id="hostName" width="100%" text="{HOSTNAME}"/>
				</mx:FormItem>
				<mx:FormItem label="Stream name">
					<mx:TextInput id="streamName" width="100%" text="{STREAMNAME}"/>
				</mx:FormItem>
				<mx:FormItem label="Stream Auth Params*">
					<mx:TextInput id="streamAuth" width="100%" text="{AUTH_TOKENS}"/>
				</mx:FormItem>
				<mx:FormItem label="*Only for secure streams">
					<mx:HBox>
						<mx:Button id="bStart" label="Start" click="startPlayback(hostName.text,streamName.text)"/>
						<mx:Button id="bStop" label="Stop" click="stopPlayback()"/>				
					</mx:HBox>
				</mx:FormItem>
			</mx:Form>

			<mx:Label text="Status:"/>
			<mx:TextArea width="100%" height="100" id="output"/>
		</mx:VBox>

		<mx:VBox id="player">
			<mx:VBox id="videoContainer" paddingLeft="5" paddingTop="5" backgroundColor="#242424" 
				width="{VIDEO_CONTAINER_DEFAULT_WIDTH}" height="{VIDEO_CONTAINER_DEFAULT_HEIGHT}" verticalScrollPolicy="off" 
				horizontalScrollPolicy="off" horizontalAlign="center">
				<mx:UIComponent id="uic" />
			</mx:VBox>
			<mx:ApplicationControlBar width="{VIDEO_DEFAULT_WIDTH}">
				<mx:Button id="bPlayPause" enabled="false" label="PAUSE" click="doPlayPause()"/>
				<mx:Button label="MUTE" enabled="false" id="bMute" click="doMute()"/>
				<mx:Text id="timeDisplay" text="00:00" fontWeight="bold"/>
			</mx:ApplicationControlBar>
		</mx:VBox>
	</mx:HBox>
</mx:Application>
