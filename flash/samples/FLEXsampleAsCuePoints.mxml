<?xml version="1.0" encoding="utf-8"?>
<!--
//
// Copyright (c) 2008, the Open Video Player authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions are 
// met:
//
//    * Redistributions of source code must retain the above copyright 
//		notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above 
//		copyright notice, this list of conditions and the following 
//		disclaimer in the documentation and/or other materials provided 
//		with the distribution.
//    * Neither the name of the openvideoplayer.org nor the names of its 
//		contributors may be used to endorse or promote products derived 
//		from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
	backgroundColor="#000000" applicationComplete="initApp()" currentState="pdl">
	
	<!-- In the interest of keeping this sample contained in a single file, the styles are all here: -->
	<mx:Style>
		@font-face {
			src: local("Verdana");
			fontFamily: "Verdana";
			unicodeRange:'U+0020-U+007E'; 
		}
		
		@font-face {
			src: local("Verdana");
			fontFamily: "Verdana";
			fontWeight: bold;
			unicodeRange:'U+0020-U+007E'; 
		}

		global {
		   color: #FFFFFF;
		   fontFamily: "Verdana";
		   fontSize: 11px;
		   fontWeight: normal;
		}
		
		.title {
			fontSize: 20px;
			fontWeight: normal;
		}
		
		.timeCode {
			fontSize: 10px;
			color: #999999;
		}
		
		.label {
			fontSize: 10px;
			color: #aaaaaa;
		}
		
		ComboBox {
			color: #333333;
			themeColor: "haloSilver";
		}
		
		RadioButton {
			themeColor: "haloSilver";
			color: #aaaaaa;
			textRollOverColor: #cccccc;
			textSelectedColor: #ffffff;
		}
		
		Button {
			themeColor: "haloSilver";
		}
		
		ProgressBar {
			barColor: #777777;
			borderColor: #777777;
			color: #111111;
		}
		
		HSlider {
			themeColor: "haloSilver";
            dataTipStyleName: "dataTip";
            dataTipOffset: 6;
        }

        .dataTip {
            backgroundColor: black;
        }
        
        DataGrid {
        	color: #333333;
        	themeColor: "haloSilver";
        }
        
        .cuePointContainerStyle {
			paddingBottom: 5;
			paddingLeft: 5;
			paddingRight: 5;
			paddingTop: 5;
			alpha: 0;
			background-color: #000000;
			background-alpha: 0.5;
        }
        
        .cuePointText {
        	fontSize: 14px;
        }
	</mx:Style>
	<mx:Script>
		<![CDATA[
			
		import flash.events.NetStatusEvent;
		import mx.controls.Alert;		
		import mx.collections.*;
		
		import org.openvideoplayer.net.*;
		import org.openvideoplayer.events.*;
		
		private var _video:Video;
		private var _nc:OvpConnection;
		private var _ns:OvpNetStream;
		private var _scrubberDragging:Boolean;
		private var _playBtnStatePlaying:Boolean;
		private var _url:String;
		private var _waitForSeek:Boolean;
		private var _streamLength:Number;
		private var _filename:String;
		private var _cuePointMgr:OvpCuePointManager;
		private var _cuePoints:Array;
		private const _NUM_CUEPOINTS:uint = 600;
		
		[Bindable]
		private var _cuePointDisplayX:int = 0;

		[Bindable]
		private var _cuePointDisplayY:int = 0;

		[Bindable]
		private var _cuePointsReadOnlyArray:ArrayCollection;

		[Bindable]
		private var _currentCuePointText:String;
		private var _currentCuePointIndex:int;
				
		[Bindable]
		private var pdlUrlList:Array = [
			"http://products.edgeboss.net/download/products/content/demo/video/oomt/elephants_dream_700k.flv",
			"http://products.edgeboss.net/download/products/content/demo/video/oomt/big_buck_bunny_700k.flv" ];
			
		[Bindable]
		private var hostNameList:Array = [ 
			"cp27886.edgefcs.net/ondemand" ];
		
		[Bindable]
		private var streamNameList:Array = [ 
			"14808/nocc_small307K" ];
		
		// Initialize the application
		private function initApp():void {
			_scrubberDragging = false;
			_playBtnStatePlaying = false;
			_waitForSeek = false;
			_streamLength = 0;
			_currentCuePointText = "";
			_currentCuePointIndex = 0;
			
			// Create the connection object and add the necessary event listeners
			_nc = new OvpConnection();
			_nc.addEventListener(OvpEvent.ERROR, errorHandler);
			_nc.addEventListener(OvpEvent.STREAM_LENGTH, streamLengthHandler);
			_nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
			
			uic.setActualSize(480,270);
			_video = new Video(480,270);
			_video.x = 0;
			_video.y = 0;
			uic.addChild(_video);
			
			// Create some ActionScript cue points
			_cuePoints = new Array();
			for (var i:uint = 0; i < _NUM_CUEPOINTS; i++) {
				var cuePoint:Object = new Object();
				cuePoint.name = "cue point number " + i;
				//cuePoint.time = 5 + (5 * i);	// every 5 seconds
				cuePoint.time = Math.round(Math.random() * 1000) + 1;	// random number 
				_cuePoints.push(cuePoint);
			}
			
			// Create the cue point manager object and add the ActionScript cue points
			_cuePointMgr = new OvpCuePointManager();
			_cuePointMgr.addEventListener(OvpEvent.ERROR, errorHandler);
			_cuePointMgr.addCuePoints(_cuePoints);
			
			// Get a "read-only" copy of the ActionScript cue points for displaying 
			_cuePointsReadOnlyArray = new ArrayCollection(_cuePointMgr.cuePoints);			
		}

		// Perform a seek operation
   		private function doSeek():void {
   			hideCuePoint();
   			gridCuePoints.selectedIndex = _currentCuePointIndex = 0;
   			_ns.seek(scrubber.value);
   		}

		// Handles the displaying of ActionScript cue points
		private function showCuePoint():void {
			_cuePointDisplayX = this.container2.x + this.videoContainer.x + (this.videoContainer.width/2) - (this._currentCuePointText.length/2);
			_cuePointDisplayY = (this.container2.y + this.videoContainer.height + this.videoContainer.y) - 36;	
			
			fadeIn.play([cuePointControl]);
		}
		
		// Handles the hiding of ActionScript cue points
		private function hideCuePoint():void {
			cuePointControl.alpha = 0.0;
		}
	
		// Starts the video playing when everything is ready
   		private function playVideo(name:String):void {
   			_playBtnStatePlaying = true;
   			this.playBtn.label = "pause";
   			_ns.play(name);
   			showContainer2();
   		}
		
		// Handles the displaying of the video controls
		private function showContainer2():void {
			fadeIn.play([container2]);
			this.cuePointControl.visible = true;
		}
		
		// Handles the hiding of the video controls
		private function hideContainer2():void {
			container2.alpha = 0.0;
			this.cuePointControl.visible = false;
		}
		
		private function showScrubTime(val:String):String {
   			var sec:Number = Number(val);
			var h:Number = Math.floor(sec/3600);
			var m:Number = Math.floor((sec%3600)/60);
			var s:Number = Math.floor((sec%3600)%60);
			return (h == 0 ? "":(h<10 ? "0"+h.toString()+":" : h.toString()+":"))+(m<10 ? "0"+m.toString() : m.toString())+":"+(s<10 ? "0"+s.toString() : s.toString());
		}

		// This method is called from the netStatusHandler below when we receive a good connection		
		private function connectedHandler():void {
			trace("Successfully connected to: " + _nc.netConnection.uri);
			playBtn.enabled = true;

			// Instantiate an OvpNetStream object
			_ns = new OvpNetStream(_nc);
			
			// Add the necessary listeners
			_ns.addEventListener(NetStatusEvent.NET_STATUS, streamStatusHandler);
			_ns.addEventListener(OvpEvent.NETSTREAM_PLAYSTATUS, streamPlayStatusHandler);
			_ns.addEventListener(OvpEvent.NETSTREAM_METADATA, metadataHandler);
			_ns.addEventListener(OvpEvent.NETSTREAM_CUEPOINT, cuepointHandler);
			_ns.addEventListener(OvpEvent.PROGRESS, update);
			_ns.addEventListener(OvpEvent.STREAM_LENGTH, streamLengthHandler); 

			// Give the video object our net stream object
			_video.attachNetStream(_ns);
			
			// Give the cue point manager the OvpNetStream object so it can start monitoring
			_cuePointMgr.netStream = _ns;
			
			if (currentState == "pdl") {
				// Progressive download
				playVideo(_filename);
			} else {
				// Streaming
				trace("Port: " + _nc.actualPort);
				trace("Protocol: " + _nc.actualProtocol);
				trace("IP address: " + _nc.serverIPaddress);
				// Start the asynchronous process of requesting the stream length
				_nc.requestStreamLength(_filename);
			}
		}
		
		//-------------------------------------------------------------------
		//
		// Event Handlers
		//
		//-------------------------------------------------------------------
		
		// Receives all cuepoint events dispatched by the active NetStream object
		// Note this is the same handler for both embedded and ActionScript cue points
		private function cuepointHandler(e:OvpEvent):void {
			if (e && e.data && e.data.name && e.data.time) {
				hideCuePoint();
				_currentCuePointText = e.data.name + " at (" + e.data.time + ") secs";
				showCuePoint();
				
				for (var i:int = _currentCuePointIndex; i < this._cuePointsReadOnlyArray.length; i++ ) {
					if (this._cuePointsReadOnlyArray[i].time == e.data.time) {
						_currentCuePointIndex = i;
						gridCuePoints.selectedIndex = _currentCuePointIndex;
						gridCuePoints.scrollToIndex(_currentCuePointIndex);
					}
				}
			}
		}
		
		// Handles the stream length response after a call to requestStreamLength
		private function streamLengthHandler(e:OvpEvent):void {
			trace("Stream length is " + e.data.streamLength);
			scrubber.maximum = e.data.streamLength;
			scrubber.enabled = true;
			_streamLength = e.data.streamLength;
			
			if (currentState == "streaming")
				playVideo(_filename);
		}
		
		// Handles the OvpEvent.PROGRESS event fired by the OvpNetStream class
   		private function update(e:OvpEvent):void {
   			timeDisplay.text =  _ns.timeAsTimeCode + "|"+ _nc.streamLengthAsTimeCode(_streamLength);
   			if (!_scrubberDragging && !_waitForSeek) {
   				scrubber.value=_ns.time;
   			}
   			if (currentState == "pdl") {
   				progressBar.setProgress(_ns.bytesLoaded,_ns.bytesTotal);
   			}
   		}
		
		// Handles all OvpEvent.ERROR events
		private function errorHandler(e:OvpEvent):void {
			Alert.show("Error #" + e.data.errorNumber+": " + e.data.errorDescription, "ERROR", Alert.OK);
		}
		
		// Handles NetStatusEvent.NET_STATUS events fired by the OvpConnection class
		private function netStatusHandler(e:NetStatusEvent):void {
			trace(e.info.code);
			switch (e.info.code) {
				case "NetConnection.Connect.Rejected":
					trace("Rejected by server. Reason is "+e.info.description);
					break;
				case "NetConnection.Connect.Success":
					connectedHandler();
					break;
			}
		}

		// Handles the NetStatusEvent.NET_STATUS events fired by the OvpNetStream class			
		private function streamStatusHandler(e:NetStatusEvent):void {
			trace("streamStatusHandler() - event.info.code="+e.info.code);
			switch(e.info.code) {
				case "NetStream.Buffer.Full":
					// _waitForSeek is used to stop the scrubber from updating
					// while the stream transtions after a seek
					_waitForSeek = false;
					break;
			}
		}
		
		// Handles the OvpEvent.NETSTREAM_PLAYSTATUS events fired by the OvpNetStream class
		private function streamPlayStatusHandler(e:OvpEvent):void {				
			trace(e.data.code);
		}
			
		// Handles the OvpEvent.NETSTREAM_METADATA events fired by the OvpNetStream class	
		private function metadataHandler(e:OvpEvent):void {
			for (var propName:String in e.data) {
				trace("metadata: "+propName+" = "+e.data[propName]);
			}
			_video.x = 0;
			_video.y = 0;
			_video.width = e.data.width;
			uic.width = e.data.width + 6;
			_video.height = e.data.height;
			uic.height = e.data.height + 6;	
			
			videoContainer.width = e.data.width + 11;
			videoContainer.height = e.data.height + 11;	
				
		}

		// Handles scrubber events (an HSlider object)
   		private function toggleDragging(state:Boolean):void {
   			_scrubberDragging = state;
   			if (!state) {
   				_waitForSeek = true;
   				doSeek();
   			}
   		}

		// Handles play button events
		private function onClickPlay(event:MouseEvent):void {			
			if (_playBtnStatePlaying) {
				_ns.pause();
				playBtn.label = "play";
			}
			else {
				_ns.resume();
				playBtn.label = "pause";
			}
			_playBtnStatePlaying = !_playBtnStatePlaying;			
		}
		
		// Handles the Load button click for progressive downloads
		private function onClickLoadPDL(event:MouseEvent):void {
   			gridCuePoints.selectedIndex = _currentCuePointIndex = 0;
   			gridCuePoints.scrollToIndex(_currentCuePointIndex);
			hideCuePoint();
			hideContainer2();
			
			_filename = this.cbPdlUrl.text;
			
			if (_nc.netConnection is NetConnection) {
				_nc.close();
			}
			
			_nc.connect(null);
		}

		// Handles the load button click for streams
		private function onClickLoadStream(event:MouseEvent):void {
   			gridCuePoints.selectedIndex = _currentCuePointIndex = 0;
   			gridCuePoints.scrollToIndex(_currentCuePointIndex);			
			hideCuePoint();
			hideContainer2();
			
			_filename = this.cbStreamName.text;
			var hostname:String = this.cbHostName.text;
			
			if (_nc.netConnection is NetConnection) {
				_nc.close();
			}
			
			_nc.connect(hostname);
		}
		
		// Handles the progressive download radio button click
		private function onClickRbPDL(event:MouseEvent):void {
			if (currentState == "pdl") {
				return;
			}

			currentState = "pdl";
			
			if (_ns) {
				if (_playBtnStatePlaying) {
					onClickPlay(null);	// cause the video to pause				
				}
				if (_nc.isProgressive) {
					showContainer2();
				}
				else {
					hideContainer2();
				}
			}
		}
		
		// Handles the streaming radio button click
		private function onClickRbStreaming(event:MouseEvent):void {
			if (currentState == "streaming") {
				return;
			}

			currentState = "streaming";

			if (_ns) {
				if (_playBtnStatePlaying) {			
					this.onClickPlay(null);	// cause the video to pause
				}
				if (_nc.isProgressive) {
					hideContainer2();
				}
				else {
					showContainer2();
				}
			}
		}
		
		]]>
	</mx:Script>
	<mx:VBox id="container" paddingLeft="20" paddingTop="20">
		<mx:HBox id="titleContainer" width="100%">
			<mx:Label text="ActionScript Cue Point Sample" styleName="title" />
		</mx:HBox>
		<mx:Spacer height="20" />
		<mx:HBox>
			<mx:RadioButton label="Progressive Download" selected="true" groupName="rbVideoType" 
				click="onClickRbPDL(event)" useHandCursor="true" buttonMode="true" />
			<mx:RadioButton label="Streaming Video" selected="false" groupName="rbVideoType" 
				click="onClickRbStreaming(event)" useHandCursor="true" buttonMode="true" />			
		</mx:HBox>
		<mx:HBox id="pdlContainer">
			<mx:Label text="URL: " styleName="label"/>
			<mx:ComboBox id="cbPdlUrl" dataProvider="{pdlUrlList}" editable="true"/>
			<mx:Button id="loadPdlBtn" label="load" click="onClickLoadPDL(event)" useHandCursor="true" buttonMode="true" />
		</mx:HBox>
		<mx:HBox id="streamingContainer" visible="false" includeInLayout="false">
			<mx:Label text="Host Name: " styleName="label" />
			<mx:ComboBox id="cbHostName" dataProvider="{hostNameList}" editable="true" />
			<mx:Label text="Stream Name: " styleName="label" />
			<mx:ComboBox id="cbStreamName" dataProvider="{streamNameList}" editable="true" />
			<mx:Button id="loadStreamBtn" label="load" click="onClickLoadStream(event)" useHandCursor="true" buttonMode="true" />
		</mx:HBox>
		<mx:Spacer height="20" />
		<mx:HBox id="container2" alpha="0.0">
			<mx:VBox horizontalAlign="center">
				<mx:VBox backgroundColor="#333333" verticalGap="0" horizontalAlign="center">
					<mx:VBox id="videoContainer" paddingLeft="5" paddingTop="5" backgroundColor="#242424" 
						width="491" height="281" verticalScrollPolicy="off" horizontalScrollPolicy="off" horizontalAlign="center">
						<mx:UIComponent id="uic" />
					</mx:VBox>
					<mx:HRule width="100%" strokeColor="black" strokeWidth="1" />
					<mx:HBox paddingLeft="6" paddingTop="3" paddingBottom="3">
						<mx:Button id="playBtn" label="pause" click="onClickPlay(event)" enabled="false" 
							useHandCursor="true" buttonMode="true" />
						<mx:VBox>
							<mx:HSlider id="scrubber" width="320" allowTrackClick="true" enabled="false" dataTipFormatFunction="showScrubTime" 
								thumbPress="toggleDragging(true)" thumbRelease="toggleDragging(false)" />
							<mx:ProgressBar id="progressBar" width="320" labelPlacement="center" 
								mode="manual" minimum="0" indeterminate="false" />					
						</mx:VBox>
						<mx:Text id="timeDisplay" text="00:00|00:00" />
					</mx:HBox>
				</mx:VBox>
			</mx:VBox>
			<mx:Spacer width="10" />
			<mx:VBox backgroundColor="#333333" verticalGap="0">
				<mx:Label text="The Current Cue Points (Time in seconds)" styleName="label" />
				<mx:DataGrid id="gridCuePoints" dataProvider="{_cuePointsReadOnlyArray}" height="265" width="250">
					<mx:columns>
						<mx:DataGridColumn headerText="Time" dataField="time" textAlign="right" width="40" sortable="false" />
						<mx:DataGridColumn headerText="Name" dataField="name" sortable="false" />
					</mx:columns>
				</mx:DataGrid>
			</mx:VBox>
		</mx:HBox>
	</mx:VBox>

	<mx:HBox id="cuePointControl" x="{this._cuePointDisplayX}" y="{this._cuePointDisplayY}" styleName="cuePointContainerStyle">
		<mx:Label id="cuePointLabel" text="{_currentCuePointText}" />							
	</mx:HBox>
	
	<mx:states>
		<mx:State name="pdl">
			<mx:SetProperty target="{pdlContainer}" name="visible" value="true" />
			<mx:SetProperty target="{pdlContainer}" name="includeInLayout" value="true" />
			<mx:SetProperty target="{progressBar}" name="visible" value="true" />
			<mx:SetProperty target="{streamingContainer}" name="visible" value="false" />
			<mx:SetProperty target="{streamingContainer}" name="includeInLayout" value="false" />
		</mx:State>
		<mx:State name="streaming">
			<mx:SetProperty target="{pdlContainer}" name="visible" value="false" />
			<mx:SetProperty target="{pdlContainer}" name="includeInLayout" value="false" />
			<mx:SetProperty target="{progressBar}" name="visible" value="false" />
			<mx:SetProperty target="{streamingContainer}" name="visible" value="true" />
			<mx:SetProperty target="{streamingContainer}" name="includeInLayout" value="true" />			
		</mx:State>
	</mx:states>
	
	<mx:Fade id="fadeIn" alphaFrom="0.0" alphaTo="1.0" />
	<mx:Fade id="fadeOut" alphaFrom="1.0" alphaTo="0.0" />
</mx:Application>
